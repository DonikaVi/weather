{"version":3,"sources":["redux/reducers/itemsReducer.js","redux/reducers/index.js","redux/constants.js","redux/Store.js","components/Header.js","components/WeatherInfo.js","components/MainPage.js","redux/actions.js","components/Footer.js","components/PageCity.js","App.js","serviceWorker.js","index.js"],"names":["initialState","city","loc","weatherInfo","combineReducers","items","state","action","type","payload","composeEnhancers","composeWithDevTools","store","createStore","rootReducer","applyMiddleware","thunk","Header","className","WeatherInfo","showBack","sunsetTime","fromUnixTime","sys","sunset","sunriseTime","sunrise","tempMain","Math","round","main","temp","tempMin","floor","temp_min","tempMax","ceil","temp_max","Container","name","textAlign","Statistic","Value","List","Item","wind","speed","toLocaleTimeString","to","Button","content","cityOptions","key","value","text","connect","dispatch","dispatchSetCity","data","setCity","dispatchSetLocation","setLocation","dispatchSetWeather","setWeather","props","history","useHistory","handleChange","e","a","useEffect","weatherForecast","fetchData","fetch","apiKey","api_url","json","weatherPosition","position","latitude","longitude","res","weather","handleSuccess","coords","handleError","error","console","warn","geolocation","navigator","getCurrentPosition","Form","onSubmit","push","Grid","columns","Row","Column","mobile","width","Field","Select","onChange","placeholder","options","Divider","Footer","API_KEY","App","Store","exact","path","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.02e0f564.chunk.js","sourcesContent":["import {SET_LOCATION, SET_CITY, SET_WEATHER} from \"../constants\";\n\nconst initialState = {\n  city: null,\n  loc: {},\n  weatherInfo: {},\n};\nexport default function items(state = initialState, action) {\n  switch (action.type) {\n    case SET_CITY:\n      return {\n        ...state,\n        city: action.payload,\n      };\n    case SET_LOCATION:\n      return {\n        ...state,\n        loc: action.payload,\n      };\n    case SET_WEATHER:\n      return {\n        ...state,\n        weatherInfo: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux'\nimport itemsReducer from \"./itemsReducer\";\n\nexport default combineReducers({\n    items: itemsReducer,\n})","export const SET_CITY = 'SET_CITY';\nexport const SET_LOCATION = 'SET_LOCATION';\nexport const SET_WEATHER = 'SET_WEATHER';\n\n\n\n\n\n// App\n\nexport const MENU_CHANGE = 'MENU_CHANGE';","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nconst composeEnhancers = composeWithDevTools({\n    // Specify here name, actionsBlacklist, actionsCreators and other options\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk),\n    // other store enhancers if any\n));\nexport default store;\n","import React from 'react';\nimport '../styles/_header.scss';\n\nfunction Header() {\n    return (\n        <header className='header'>\n            <div className='header-container'>\n                <div className='header-container-name'>Weather in your pocket</div>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport { Button, Container, List, Statistic } from \"semantic-ui-react\";\nimport { fromUnixTime } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nfunction WeatherInfo({ weatherInfo, showBack }) {\n  const sunsetTime = fromUnixTime(weatherInfo.sys.sunset);\n  const sunriseTime = fromUnixTime(weatherInfo.sys.sunrise);\n  const tempMain = Math.round(weatherInfo.main.temp);\n  const tempMin = Math.floor(weatherInfo.main.temp_min);\n  const tempMax = Math.ceil(weatherInfo.main.temp_max);\n\n  return (\n    <>\n      <Container className=\"content-weather\">\n        Погода в {weatherInfo.name} сейчас\n      </Container>\n\n      <Container className={\"content-weather-left\"} textAlign=\"center\">\n        <Statistic>\n          <Statistic.Value>{tempMain} °C</Statistic.Value>\n        </Statistic>\n        <List>\n          <List.Item>Скорость ветра: {weatherInfo.wind.speed} м/с</List.Item>\n          <List.Item>Восход: {sunriseTime.toLocaleTimeString()}</List.Item>\n          <List.Item>Заход: {sunsetTime.toLocaleTimeString()}</List.Item>\n          <List.Item>Максимальная температура сегодня: {tempMax} °C</List.Item>\n          <List.Item>Минимальная температура сегодня: {tempMin} °C</List.Item>\n        </List>\n      </Container>\n      {showBack && (\n        <Container>\n          <div className=\"go-back\">\n            <Link to=\"/\">\n              <Button content=\"Primary\">Go back and select city</Button>\n            </Link>\n          </div>\n        </Container>\n      )}\n    </>\n  );\n}\n\nexport default WeatherInfo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../styles/_mainPage.scss\";\nimport \"../App.js\";\nimport { Divider, Button, Form, Select, Grid } from \"semantic-ui-react\";\nimport WeatherInfo from \"./WeatherInfo\";\nimport { setCity, setLocation, setWeather } from \"../redux/actions\";\n\nconst cityOptions = [\n  { key: \"od\", value: \"Odessa\", text: \"Odessa\" },\n  { key: \"ki\", value: \"Kyiv\", text: \"Kyiv\" },\n  { key: \"ca\", value: \"Cairns\", text: \"Cairns\" },\n  { key: \"lo\", value: \"London\", text: \"London\" },\n  { key: \"ma\", value: \"Málaga\", text: \"Málaga\" },\n  { key: \"am\", value: \"Amsterdam\", text: \"Amsterdam\" },\n];\n\nfunction MainPage(props) {\n  const history = useHistory();\n  const { weatherInfo, city } = props;\n\n  const handleChange = async (e, data) => {\n    props.dispatchSetCity(data.value);\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      if (city) {\n        await weatherForecast();\n      }\n    }\n    fetchData();\n  }, [city]);\n\n  const weatherForecast = async () => {\n    const api_url = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${props.apiKey}`\n    );\n    const data = await api_url.json();\n    props.dispatchSetWeather(data);\n  };\n\n  function handleSubmit() {\n    history.push(\"/city\");\n  }\n\n  const weatherPosition = async (position) => {\n    try {\n      const res = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${position.latitude}&lon=${position.longitude}&units=metric&appid=${props.apiKey}`\n      );\n      const weather = await res.json();\n      props.dispatchSetWeather(weather);\n    } catch (e) {}\n  };\n\n  const handleSuccess = async (position) => {\n    const { latitude, longitude } = position.coords;\n    props.dispatchSetLocation({\n      latitude,\n      longitude,\n    });\n\n    await weatherPosition(position.coords);\n  };\n\n  const handleError = (error) => {\n    console.warn(error);\n  };\n\n  useEffect(() => {\n    const { geolocation } = navigator;\n    if (!geolocation) {\n      console.warn(\"Geolocation not supported\");\n      return;\n    }\n    geolocation.getCurrentPosition(\n      handleSuccess,\n      handleError,\n    );\n  }, []);\n\n  return (\n    <main className=\"main\">\n      <div className=\"content\">\n        <Form onSubmit={handleSubmit} className={\"form\"}>\n          <p>У природы нет плохой погоды в городе: {city || weatherInfo.name}</p>\n          <Grid columns={2}>\n            <Grid.Row>\n              <Grid.Column mobile={13} width={13}>\n                <Form.Field>\n                  <Select\n                    onChange={handleChange}\n                    placeholder=\"Выберите город\"\n                    name=\"city\"\n                    options={cityOptions}\n                  />\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column mobile={3} width={3}>\n                <Button type=\"submit\">OK</Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Form>\n\n        {weatherInfo.name && <WeatherInfo weatherInfo={weatherInfo} />}\n\n        <Divider />\n      </div>\n    </main>\n  );\n}\n\nconst mapsStateToProps = (state) => {\n  return {\n    city: state.items.city,\n    loc: state.items.loc,\n    weatherInfo: state.items.weatherInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSetCity: (data) => {\n      dispatch(setCity(data));\n    },\n    dispatchSetLocation: (data) => {\n      dispatch(setLocation(data));\n    },\n    dispatchSetWeather: (data) => {\n      dispatch(setWeather(data));\n    },\n  };\n};\n\nexport default connect(mapsStateToProps, mapDispatchToProps)(MainPage);\n","import { SET_CITY, SET_LOCATION, SET_WEATHER } from \"./constants\";\n\nexport function setCity(data) {\n  return {\n    type: SET_CITY,\n    payload: data,\n  };\n}\nexport function setLocation(data) {\n  return {\n    type: SET_LOCATION,\n    payload: data,\n  };\n}\n\nexport function setWeather(data) {\n  return {\n    type: SET_WEATHER,\n    payload: data,\n  };\n}\n","import React from 'react';\nimport \"../styles/_footer.scss\"\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <div className=\"footer-made\">\n                <p className=\"footer-made-by\">Made by Viktoriia Donika</p>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"semantic-ui-react\";\nimport WeatherInfo from \"./WeatherInfo\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/_pageCity.scss\";\n\nfunction PageCity({ weatherInfo }) {\n  if (weatherInfo && weatherInfo.name) {\n    return (\n      <main className=\"main\">\n        <WeatherInfo weatherInfo={weatherInfo} showBack={true} />\n      </main>\n    );\n  }\n  return (\n    <div className=\"go-back\">\n      <Link to=\"/\">\n        <Button content=\"Primary\">Go back and select city</Button>\n      </Link>\n    </div>\n  );\n}\n\nconst mapsStateToProps = (state) => {\n  return {\n    city: state.items.city,\n    loc: state.items.loc,\n    weatherInfo: state.items.weatherInfo,\n  };\n};\n\nexport default connect(mapsStateToProps, null)(PageCity);\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport Store from '../src/redux/Store';\nimport \"./styles/App.scss\";\nimport Header from \"./components/Header\";\nimport MainPage from \"./components/MainPage\";\nimport Footer from \"./components/Footer\";\nimport PageCity from \"./components/PageCity\";\n\nconst API_KEY = \"4cd26a9ca1dd9cefed859cf6822fadf7\";\n\nfunction App() {\n  //navigator.geolocation.getCurrentPosition((r) => console.log(r), e => console.log(e));\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Provider store={Store}>\n      <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <MainPage apiKey={API_KEY} />\n        </Route>\n        <Route exact path=\"/\">\n          <MainPage apiKey={API_KEY} />\n        </Route>\n        <Route path=\"/city/\" children={<PageCity />} />\n      </Switch>\n      </Router>\n      </Provider>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}